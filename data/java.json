[{"set_id":"2097254","user_id":"827407","title":"Certified Java Programmer","subject":"112  questions about Java","url":"http:\/\/www.flashcardexchange.com\/cards\/certified-java-programmer-2097254","card_count":"112","lang_front":"en","lang_back":"en","score":"4","views":"311","has_image":"0","created":"2012-02-20 00:00:00","last_modified":"2013-02-14 23:49:05","access":"public","cards":[{"card_id":"54550735","front":"What types of characters can a legal identifier start with?","back":"Identifiers must start with a letter, a currency character ($), or a connecting character such as the underscore ( _ ). Identifiers cannot start with a number!","hint":"Identifiers cannot start with a number!","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54550770","front":"What types of characters can a legal identifier start with?","back":"Alpha,\r\nConnector (such as Underscore)\r\nCurrency ($)","hint":"Cannot start with numeric.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54550821","front":"After the first character of a identifier, what character types can be used for a legal identifier","back":"After the first character, identifiers can contain any combination of letters, currency characters, connecting characters, or numbers.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54550939","front":"What is the max. size of a name of a legal identifier?","back":"In practice, there is no limit to the number of characters an identifier can contain.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54550943","front":"What java keywords can be used as a identifier?","back":"None of them.  You can't use a Java keyword as an identifier.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54550945","front":"Is the identifier named foo the same as the identifier named FOO?","back":"No. Identifiers in Java are case-sensitive;","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54550950","front":"List the 50 java keywords.","back":"See list from book.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54550961","front":"What java keywords have uppercase characters in their names?","back":"None.  All java keywords consist of lowercase letters.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54551060","front":"What is Sun Convention for naming a class?","back":"first letter should be capitalized, and if several words are linked together to form the name, the first letter of the inner words should be uppercase (a format that's sometimes called \"camelCase\"). For classes, the names should typically be nouns.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54551088","front":"What are Sun Naming Conventions for Interfaces?","back":"For interfaces, the names should typically be adjectives like Methods The first letter should be lowercase, and then normal camelCase","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54551121","front":"What are Sun Conventions for Method Names?","back":"The first letter should be lowercase, and then normal camelCase rules should be used. In addition, the names should typically be verb-noun pairs. For example:","hint":"Method name should be patterned as \"verb noun\" format","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54551189","front":"What are Sun standards for naming variable identifiers.","back":"the camelCase format should be used, starting with a lowercase letter. Sun recommends short, meaningful names, which sounds good to us.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54551205","front":"What are Sun conventions for naming static variables.","back":"Java constants are created by marking variables static and final. They should be named using uppercase letters with underscore characters as separators:","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54551507","front":"For a Java Bean, What is the naming rule for a property that is not a boolean?","back":"There must be a getter method with a prefix of \"get\". There must be a setter method with a prefix of \"set\". An instance variable with the property name need not exist.","hint":"If the property is not a boolean, the getter method's prefix must be get. For example, getSize() is a valid JavaBeans getter name for a property named \"size.\" Keep in mind that you do not need to have a variable named size? (although some IDEs expect it). The name of the property is inferred from the getters and setters, not through any variables in your class. What you return from getSize() is up to you.\r\n","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54551557","front":"For a JavaBean property that is a boolean, what is the proper name of the variable?","back":"the property is a boolean, the getter method's prefix is either get or is. For example, getStopped() or isStopped() are both valid JavaBeans names for a boolean property.","hint":"Either get or is can be used as a prefix.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54551822","front":"For a java bean, what is a valid name for a setter method?","back":"The setter method's prefix must be 'set'. For example, setSize() is the valid JavaBean name for a property named size.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54551823","front":"What access modifier's are permitted for a setter method of a Java Bean?","back":"Setter method signatures must be marked public, with a void return type and an argument that represents the property type.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54551824","front":"For a java bean, what return types are permitted for a setter method?","back":"void (only)","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54551825","front":"What are java bean rules, for a getter method?","back":"Getter method signatures must be marked public, take no arguments, and have a return type that matches the argument type of the setter method for that property.","hint":"must be public access modifier\r\nincludes no arguments\r\nreturn type that matches setter method for that property.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54551826","front":"What are the objects called that are notified when an event occurs?","back":"The objects that receive the information that an event occurred are called listeners.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54552240","front":"Methods that add or remove listeneres from an event must conform to java bean naming standards.  True or False?","back":"True. the methods that are used to add or remove listeners from an event must also follow JavaBean naming standards:","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54552242","front":"What is an example of a valid listener method name that will be used to register a listener with an event source?","back":"Listener method names used to \"register\" a listener with an event source must use the prefix add, followed by the listener type. For example, addActionListener() is a valid name for a method that an event source will have to allow others to register for Action events.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54552243","front":"What is an example of a valid listener method name that will be used to unregister a listener from an event source?","back":"Listener method names used to remove (\"unregister\") a listener must use the prefix remove, followed by the listener type (using the same rules as the registration add method).","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54552244","front":"What is an example of a valid argument list of a listener method used to regsiter or unregister a listener?","back":"The type of listener to be added or removed must be passed as the argument to the method.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54558868","front":"How many public class statements can be included in a valid source code file?","back":"There can be only one public class per source code file.","hint":"Test this.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54558869","front":"Where on a line in a source file, can comments appear?","back":"Comments can appear at the beginning or end of any line in the source code file; they are independent of any of the positioning rules discussed here.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54558870","front":"If there is a public class entered in a source file, what must the source file be named?","back":"If there is a public class in a file, the name of the file must match the name of the public class. For example, a class declared as public class Dog { } must be in a source code file named Dog.java.","hint":"Public class name should be the same as the source code file name.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54558871","front":"What is the positioning rule for using a package statement in a source files.","back":"If the class is part of a package, the package statement must be the first line in the source code file, before any import statements that may be present.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54558872","front":"what are the positioning rules for import statements relative to the package statement and the class declaration statement.","back":"If there are import statements, they must go between the package statement (if there is one) and the class declaration. If there isn't a package statement, then the import statement(s) must be the first line(s) in the source code file. If there are no package or import statements, the class declaration must be the first line in the source code file.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54559860","front":"If you declare multiple classes in a file, how do you organize them to use different packages or different imports.","back":"import and package statements apply to all classes within a source code file. In other words, there's no way to declare multiple classes in a file and have them in different packages, or use different imports.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54559861","front":"How many classes can be contained into one source file?","back":"A file can have more than one nonpublic class.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54559862","front":"What are the naming options for a file that does not contain any public classes?","back":"Files with no public classes can have a name that does not match any of the classes in the file","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54563947","front":"What is the minimal code for a class that will compile just fine?","back":"class MyClass { }","hint":"Test","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54563948","front":"Class Modifiers fall into two categories: access modifiers and non-access modifiers.  What are the access modifiers and what do they mean?","back":"public - class can be accessed by any other class\r\nprotected - any class that is in the same package can be accessed\r\nprivate -","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54563949","front":"Class Modifiers fall into two categories: access modifiers and non-access modifiers.  What are the non-access modifiers and what do they mean?","back":"strictfp, abstract, final","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54563950","front":"There are 3 access modifiers and 4 access levels. What is the fourth access level called that is not an explicit access modifier?","back":"The fourth access control level (called default or package access) is what you get when you don't use any of the three access modifiers.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54563951","front":"All four access controls work for most method and variables declarations.  But only two access controls work for class declarations.  What are there names?","back":"Although all four access controls (which means all three modifiers) work for most method and variable declarations, a class can be declared with only public or default access; the other two access control levels don't make sense for a class, as you'll see.","hint":"Test","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54564474","front":"Java is a package-centric language.  What is the purpose of a package?","back":"Packages enable the developer to organize his classes and also clarify what version of a class to use if there is more than one class with the same class name.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54564475","front":"What does class Access mean?  What does it mean when one Class, Class A can access Class B?","back":"When we say code from one class (class A) has access to another class (class B), it means class A can do one of three things: \r\nCreate an instance of class B. \r\nExtend class B (in other words, become a subclass of class B). \r\nAccess certain methods and variables within class B, depending on the access control of those methods and variables.\r\nIn effect, access means visibility. If class A can't see class B, the access level of the methods and variables within class B won't matter; class A won't have any way to access those methods and variables.","hint":"Test","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:08"},{"card_id":"54564476","front":"What does class access mean when the class access modifier is not stated?","back":"Default Access A class with default access has no modifier preceding it in the declaration! It's the access control you get when you don't type a modifier in the class declaration. Think of default access as package-level access, because a class with default access can be seen only by classes within the same package. For example, if class A and class B are in different packages, and class A has default access, class B won't be able to create an instance of class A, or even declare a variable or return type of class A. In fact, class B has to pretend that class A doesn't even exist, or the compiler will complain.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54564477","front":"What does the public access modifier mean?","back":"Public Access A class declaration with the public keyword gives all classes from all packages access to the public class. In other words, all classes in the Java Universe (JU) have access to a public class.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54564478","front":"When do you need to use an import statement?","back":"if a public class you're trying to use is in a different package from the class you're writing, you'll still need to import the public class.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54584809","front":"When would you consider using the non-access modifier 'final'?","back":"You should make a final class only if you need an absolute guarantee that none of the methods in that class will ever be overridden. If you're deeply dependent on the implementations of certain methods, then using final gives you the security that nobody can change the implementation out from under you.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54584810","front":"What is the purpose of the non-access modifier 'abstract'?","back":"Abstract Classes An abstract class can never be instantiated. Its sole purpose, mission in life is to be extended (subclassed).","hint":"Note, however, that you can compile and execute an abstract class, as long as you don't try to make an instance of it.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:09"},{"card_id":"54584811","front":"When a method is marked as abstract what changes in the body of the method?","back":"An abstract method does not have a body.  It ends with a semi-colon.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54584812","front":"What non-access modifiers must be used for a class to implement an abstract method?","back":"If a method is in a class\u2014as opposed to an interface\u2014then both the method and the class must be marked abstract.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54584813","front":"What non-access modifier is required of a class that has a abstract method?","back":"if even a single method is abstract, the whole class must be declared abstract.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54584881","front":"When can a class be marked with the non-access modifiers 'final' and 'abstract' ?","back":"you can't mark a class or a method as both abstract and final. They have nearly opposite meanings. An abstract class must be subclassed, whereas a final class must not be subclassed.","hint":"The code will not compile.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:09"},{"card_id":"54585335","front":"What is the purpose of an interface?","back":"When you create an interface, you're defining a contract for what a class can do, without saying anything about how the class will do it.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54585336","front":"What is the difference between an abstract class and an interface?","back":"Abstract class may have at least one abstract method.  An interface has nothing but abstract methods.  An interface will not have method implementations .","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54585337","front":"What access-modifiers are allowed for an interface?","back":"All interface methods are implicitly declared as public and abstract.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54585338","front":"What variable access modifiers can be declared in an interface?","back":"All variables defined in an interface must be public, static, and final\u2014in other words, interfaces can declare only constants, not instance variables.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54585339","front":"What non-access modifiers can be used for interface methods?","back":"Because interface methods are abstract, they cannot be marked final, strictfp, or native.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54585689","front":"What are the rules for extending an interface?","back":"An interface can extend another interface.  An interface can extend nothing other than an interface.  Interfaces don't implement anything.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54585690","front":"What are two ways to use non-access modifiers to declare an interface","back":"public abstract interface Rollable{ }\r\npublic interface Rollable{ }","hint":"Both of these declarations are valid and interchangeable.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:09"},{"card_id":"54585691","front":"What two access modifiers can be used with an interface?","back":"public access and default access (package)","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54585692","front":"What access-modifiers can be used by an Interface method?","back":"All interface methods are public and abstract regardless of what is in the interface definition","hint":"You must remember that all interface methods are public and abstract regardless of what you see in the interface definition. Look for interface methods declared with any combination of public, abstract, or no modifiers. For example, the following five method declarations, if declared within their own interfaces, are legal and identical!\r\n","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:09"},{"card_id":"54585693","front":"What access modifiers are considered valid declarations for interface constants?","back":"interface constants are defined in an interface, they don't have to be declared as public, static, or final. They must be public, static, and final, but you don't have to actually declare them that way.  public, static, final is implied.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54586403","front":"When can the value of a constant declared in an interface be changed?","back":"You can't change the value of a constant! Once the value has been assigned, the value can never be modified.","hint":"This is due to the use of the 'final' non-access modifier.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:09"},{"card_id":"54586404","front":"What are considered class members?","back":"instance variables and methods.  local variables are not considered class members.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54586405","front":"What access-levels can be used for a class?","back":"Whereas a class can use just two of the four access control levels (default or public), members can use all four: public protected default private","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54586406","front":"What access-levels can be used for a method?","back":"Whereas a class can use just two of the four access control levels (default or public), members can use all four: public protected default private","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54586407","front":"What is the difference between the default access control and protected access control?","back":"Default protection is what you get when you don't type an access modifier in the member declaration. The default and protected access control types have almost identical behavior, except for one difference:","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587040","front":"What does it mean for code in one class to have access to a member of another class?","back":"For now, ignore any differences between methods and variables. If class A has access to a member of class B, it means that class B's member is visible to class A.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587041","front":"What are the three ways to access a method?","back":"1.  Put the method in the same class.\r\n2.  Invoke the method using a reference to the class the method is in.\r\n3. Invoke an inherited method.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587042","front":"What access modifiers can be used for a subclass to be able to inherit a superclass member even if both classes are not in the same package?","back":"For a subclass, if a member of its superclass is declared public, the subclass inherits that member regardless of whether both classes are in the same package:","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587043","front":"What does a reference to 'this' mean?","back":"The reference this always refers to the currently executing object\u2014in other words, the object running the code where you see the this reference. Because  this reference is implicit, you don't need to preface your member access code with it, but it won't hurt.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587044","front":"What does the 'private' access modifier mean?","back":"Members marked private can't be accessed by code in any class other than the class in which the private member was declared.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587306","front":"What happens when a subclass tries to access a 'private' member in it's superclass?","back":"When a member is declared private, a subclass can't inherit it. For the exam, you need to recognize that a subclass can't see, use, or even think about the private members of its superclass.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587307","front":"Can a subclass override a superclass member that is marked private?","back":"No. You can, however, declare a matching method in the subclass. But regardless of how it looks, it is not an overriding method.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587308","front":"What are recommended access modifiers for instance variables?","back":"protected or private.  Getters and setters should be used to access the value of the variables. These accessor methods can then test the value to insure it is valid.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587309","front":"What is the difference between default access and protected access?","back":"The protected and default access control levels are almost identical, but with one critical difference. A default member may be accessed only if the class accessing the member belongs to the same package, whereas a protected member can be accessed (through inheritance) by a subclass even if the subclass is in a different package.\r\nDefault and protected behavior differ only when we talk about subclasses. If the protected keyword is used to define a member, any subclass of the class declaring the member can access it through","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587310","front":"What access modifiers can apply to local variables?","back":"Access modifiers can not be applied to local variables.  The only modifier that can be applied to a local variable is 'final'.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587763","front":"When would you consider using 'final' on a method that is in a superclass?","back":"final keyword prevents a method from being overridden in a subclass, and is often used to enforce the API functionality of a method.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587764","front":"What modifiers can be applied to method arguments?","back":"Method arguments are essentially the same as local variables.  This means they can also have the modifier final.  In other words, a final argument must keep the same value that the parameter had when it was passed into the method.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587765","front":"Can you have an abstract class that does not contain an abstract method?","back":"An abstract class can be valid if it does not have any abstract methods.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587766","front":"What are three clues  to determine if a class is abstract or not?","back":"The method is not marked abstract. The method declaration includes curly braces, as opposed to ending in a semicolon. In other words, the method has a method body. \r\nThe method provides actual implementation code.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54587767","front":"What should you look for to find invalid concrete classes?","back":"Look for concrete classes that don't provide method implementations for abstract methods of the superclass.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54588363","front":"What is an overloaded method?","back":"it is simply an overloaded method (a method using the same identifier, but different arguments).","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54588364","front":"What does the modifier synchronized mean?","back":"The synchronized keyword indicates that a method can be accessed by only one thread at a time.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54588365","front":"What access-modifiers can the synchronized modfier be combined with?","back":"You should also know that the synchronized modifier can be matched with any of the four access control levels (which means it can be paired with any of the three access modifier keywords).","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54588366","front":"What class members are able to use the synchronized modifier?","back":"synchronized modifier can be applied only to methods\u2014not variables, not classes, just methods.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54588367","front":"What is the modifer 'native' used for? What class members are able to use the 'native' modifier?","back":"The native modifier indicates that a method is implemented in platform-dependent code, often in C. other than Know that native is a modifier (thus a reserved keyword) and that native can be applied only to methods\u2014not classes, not variables, just methods. Note that a native method's body must be a semicolon (;) (like abstract methods), indicating that the implementation is omitted.","hint":"You don't need to know how to use native methods for the exam.  Native methods do not have a body.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:09"},{"card_id":"54588847","front":"What is the purpose of the modifier strictfp?","back":"strictfp forces floating points (and any floating-point operations) to adhere to the IEEE 754 standard.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54588848","front":"What class members can strictfp be used with?","back":"Only the class and method members?","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54588849","front":"What are Variable Argument Lists (var-args) ?","back":"Introduced in Java 5.0.  Used to define methods that have a variable number of arguments. AKA var-args","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54588850","front":"What are declaration rules for using var-args?","back":"1.  Can only use one var-arg per method.\r\n2.  To declare a method using a var-arg parameter, you follow the type with an ellipsis (\u2026), a space, and then the name of the array that will hold the parameters received.\r\n3. The var-arg must be the last parameter in the method's signature, and you can have only one var-arg in a method.\r\nParameter type can be primitive or an object.","hint":"Example:\r\n   doStuff(Animal... animal)\r\n","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:09"},{"card_id":"54588851","front":"What are the differences between a constructor and a method?","back":"The first thing to notice is that constructors look an awful lot like methods. A key difference is that a constructor can't ever, ever, ever, have a return type\u2026ever! Constructor declarations can however have all of the normal access modifiers, and they can take arguments (including var-args), just like methods. The other BIG RULE, to understand about constructors is that they must have the same name as the class in which they are declared. Constructors can't be marked static (they are after all associated with object instantiation), they can't be marked final or abstract","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589240","front":"What are the two types of variables in Java: \r\n Once a primitive has been declared, its primitive type can never change, although in most cases its value can change.","back":"Primitives and Object References.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589241","front":"What are the eight types of primitive variables?","back":"A primitive can be one of eight types: char, boolean, byte, short, int, long, double, or float.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589242","front":"What is a reference variable?","back":"A reference variable is used to refer to (or access) an object. A reference variable is declared to be of a specific type and that type can never be changed. \r\nA reference variable can be used to refer to any object of the declared type, or of a subtype of the declared type (a compatible type).","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589243","front":"For the types of integer and floating point primitives  List the types in order by size of their ranges.","back":"Integers:  byte, short, int, long.\r\nfloating point:  float, double.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589244","front":"What is the range of floating point types such as float and double?","back":"float is 32 bits long\r\ndouble is 64 bits long.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589587","front":"There are 6 number primitives.  Name them and their size?","back":"byte = 1 byte\r\nshort = 2 bytes\r\nint = 4 bytes\r\nlong = 8 bytes\r\na boolean does not have a range.\r\nchar 1 byte","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589589","front":"What is a local variable?","back":"Local variables are variables declared within a method. \r\nThat means the variable is not just initialized within the method, but also declared within the method. \r\nJust as the local variable starts its life inside the method, it's also destroyed when the method has completed. \r\nLocal variables are always on the stack, not the heap.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589593","front":"What modifiers can a local variable be associated with?","back":"variable declarations can't use most of the modifiers that can be applied to instance variables, such as public (or the other access modifiers), transient, volatile, abstract, or static, but as we saw earlier, local variables can be marked final.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589595","front":"What are rules relating to initializaing local variables?","back":"The key is to remember that a local variable must be initialized before you try to use it. The compiler will reject any code that tries to use a local variable that hasn't been assigned a value, because\u2014unlike instance variables\u2014local variables don't get default values.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54589601","front":"What is the scoope of a local variable?","back":"A local variable can't be referenced in any code outside the method in which it's declared.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54590787","front":"Describe what  an array is including the types an array can hold?  Can an array hold primitives and object referencese?","back":"In Java, arrays are objects that store multiple variables of the same type, or variables that are all subclasses of the same type. Arrays can hold either primitives or object references,","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54590788","front":"How do you declare an array of primitives or an array of objects?","back":"int [ ] myNumbers;\r\nCustomer[ ] customers;\r\nalternate syntax is also valid:\r\nint myNumbers[ ] ;\r\nCustomer customers [ ];","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54590789","front":"Why would you want to use one of the Collection types in java.util instead of using an array?","back":"Collections can dynamically adjust their size where an array can not.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54590790","front":"How would you declare a 2 dimensional array?","back":"int [ ] [ ] myNumbers;","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54590791","front":"How do you declare an array using a fixed size?","back":"You don't. You never specify the size in declaration.  Size matters when the array is constructed.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54591039","front":"What does final mean when a primitive variable is declared as final?","back":"Once the variable is initialized the value will not be able to be changed for the life of the variable.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54591040","front":"What does final mean when a object reference variable is declared as final?","back":"Once the variable is initialized the object reference can not be used to refer to another object. You can modify the state of the variable but not the object that is being referenced.","hint":"There are no final objects, just final object references.","image_front":"","image_url":"","image_hint":"","last_modified":"2012-11-06 12:28:09"},{"card_id":"54591041","front":"What does it mean to use the transient modifier on a class member?","back":"Transient modifer only applies to instance variables.  You mark an instance variable as transient, you're telling the JVM to skip (ignore) this variable when you attempt to serialize the object containing it.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54591042","front":"What does it mean to use the volatile modifier on a class member?","back":"The volatile modifier tells the JVM that a thread accessing the variable must always reconcile its own private copy of the variable with the master copy in memory. It only applies to instance variables.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54591043","front":"What are static variables?","back":"The static modifier is used to create variables and methods that will exist independently of any instances created for the class. All static members exist before you ever make a new instance of a class.  All instances of a given class share the same value for any given static variable.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54591650","front":"What can you declare as static in a class?","back":"methods, instance variables, initialization block, nested classes.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54591653","front":"What is the purpose of an enum?","back":"In 5.0, Java lets you restrict a variable to having one of only a few pre-defined values\u2014in other words, one value from an enumerated list. (The items in the enumerated list are called, surprisingly, enums.)","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54591656","front":"Demonstrate how to define an enum outside of a class?","back":"Declaring an enum outside a class: \r\n\r\nThe however they must not be declared within a method! Declaring an enum outside a class: The preceding code can be part of a single file.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"},{"card_id":"54591659","front":"What are enums?","back":"Enums are not strings or ints. They are instances of the type.","hint":"","image_front":"","image_url":"","image_hint":"","last_modified":"2012-10-22 17:47:04"}]}]